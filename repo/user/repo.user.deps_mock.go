// Code generated by MockGen. DO NOT EDIT.
// Source: repo.user.deps.go

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRedis is a mock of Redis interface.
type MockRedis struct {
	ctrl     *gomock.Controller
	recorder *MockRedisMockRecorder
}

// MockRedisMockRecorder is the mock recorder for MockRedis.
type MockRedisMockRecorder struct {
	mock *MockRedis
}

// NewMockRedis creates a new mock instance.
func NewMockRedis(ctrl *gomock.Controller) *MockRedis {
	mock := &MockRedis{ctrl: ctrl}
	mock.recorder = &MockRedisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedis) EXPECT() *MockRedisMockRecorder {
	return m.recorder
}

// GetJSON mocks base method.
func (m *MockRedis) GetJSON(ctx context.Context, key string, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJSON", ctx, key, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetJSON indicates an expected call of GetJSON.
func (mr *MockRedisMockRecorder) GetJSON(ctx, key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJSON", reflect.TypeOf((*MockRedis)(nil).GetJSON), ctx, key, data)
}

// SetJSONTTL mocks base method.
func (m *MockRedis) SetJSONTTL(ctx context.Context, key string, value interface{}, TTL time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetJSONTTL", ctx, key, value, TTL)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetJSONTTL indicates an expected call of SetJSONTTL.
func (mr *MockRedisMockRecorder) SetJSONTTL(ctx, key, value, TTL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJSONTTL", reflect.TypeOf((*MockRedis)(nil).SetJSONTTL), ctx, key, value, TTL)
}
